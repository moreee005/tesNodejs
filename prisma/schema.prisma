// This is your Prisma schema file for Payment API
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique @db.VarChar(50)
  email        String        @unique @db.VarChar(100)
  password     String        @db.VarChar(255)
  firstName    String        @map("first_name") @db.VarChar(50)
  lastName     String        @map("last_name") @db.VarChar(50)
  phoneNumber  String?       @map("phone_number") @db.VarChar(15)
  imageProfile String?       @map("image_profile") @db.VarChar(255)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  wallet       Wallet?
  transactions Transaction[]

  @@map("users")
}

model Wallet {
  id                Int                @id @default(autoincrement())
  userId            Int                @unique @map("user_id")
  balance           Decimal            @default(0.00) @db.Decimal(10, 2)
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  walletTransactions WalletTransaction[]

  @@map("wallets")
}

model WalletTransaction {
  id              Int               @id @default(autoincrement())
  walletId        Int               @map("wallet_id")
  amount          Decimal           @db.Decimal(10, 2)
  transactionType TransactionType   @map("transaction_type")
  status          TransactionStatus @default(pending)
  referenceId     String?           @map("reference_id") @db.VarChar(100)
  description     String?           @db.Text
  createdAt       DateTime          @default(now()) @map("created_at")
  wallet          Wallet            @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("wallet_transactions")
}

model ServiceCategory {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description String?   @db.Text
  icon        String?   @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  services    Service[]

  @@map("service_categories")
}

model Service {
  id           Int            @id @default(autoincrement())
  categoryId   Int            @map("category_id")
  name         String         @db.VarChar(100)
  description  String?        @db.Text
  isActive     Boolean        @default(true) @map("is_active")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  category     ServiceCategory @relation(fields: [categoryId], references: [id])
  products     Product[]

  @@map("services")
}

model Product {
  id           Int           @id @default(autoincrement())
  serviceId    Int           @map("service_id")
  name         String        @db.VarChar(100)
  code         String        @db.VarChar(50)
  price        Decimal       @db.Decimal(10, 2)
  description  String?       @db.Text
  isActive     Boolean       @default(true) @map("is_active")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  service      Service       @relation(fields: [serviceId], references: [id])
  transactions Transaction[]

  @@map("products")
}

model Transaction {
  id               Int               @id @default(autoincrement())
  userId           Int               @map("user_id")
  productId        Int               @map("product_id")
  transactionNumber String           @unique @map("transaction_number") @db.VarChar(50)
  amount           Decimal           @db.Decimal(10, 2)
  adminFee         Decimal           @default(0.00) @map("admin_fee") @db.Decimal(10, 2)
  totalAmount      Decimal           @map("total_amount") @db.Decimal(10, 2)
  customerNumber   String            @map("customer_number") @db.VarChar(50)
  status           TransactionStatus @default(pending)
  paymentMethod    PaymentMethod     @map("payment_method")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  user             User              @relation(fields: [userId], references: [id])
  product          Product           @relation(fields: [productId], references: [id])

  @@map("transactions")
}

model Banner {
  id          Int      @id @default(autoincrement())
  bannerName  String   @map("banner_name") @db.VarChar(100)
  bannerImage String   @map("banner_image") @db.VarChar(255)
  description String?
  isActive    Boolean  @map("is_active") @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("banners")
}

enum TransactionType {
  top_up
  payment
  refund
}

enum TransactionStatus {
  pending
  processing
  success
  failed
}

enum PaymentMethod {
  wallet
  bank_transfer
  card
}